import java.nio.file.Paths

plugins {
    id 'java'
}

group 'xyz.eginez'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
    compile(project(":launcher"))
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

/* pico cli generation
compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}
 */

def customTest = tasks.create(name: "customTest", type: JavaExec) {
    classpath += files(Paths.get(project.buildDir.absolutePath, "classes", "test").toAbsolutePath())
    classpath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    main = "org.junit.platform.console.ConsoleLauncher"
    args = ["-c", "xyz.eginez.junit.TestSimple"]
}
customTest.dependsOn(classes)

def buildTest = tasks.create(name: "buildTest", type: Exec) {
    def classpath = files(Paths.get(project.buildDir.absolutePath, "classes", "java", "test").toAbsolutePath())
    classpath += sourceSets.test.runtimeClasspath.filter { !it.absolutePath.contains("org.graalvm")  }

    //TODO what do we do with classes that were discovered?
    def args = ["-c", "xyz.eginez.xyz.eginez.junit.TestSimple"]

    def execLine = ["native-image"]
    if (project.hasProperty("debug")) {
        execLine.add('--debug-attach')
    }

    def main = "org.junit.platform.console.ConsoleLauncher"
    execLine.addAll(['--verbose',
                     '--no-server',
                     '--allow-incomplete-classpath',
                     '--report-unsupported-elements-at-runtime',
                     '--enable-all-security-services',
                     '-H:+ReportExceptionStackTraces',
                     '-H:+TraceClassInitialization',
                     "-H:Path=${project.buildDir}",
                     '-H:+PrintClassInitialization',
                     "-H:Name=testBin"])
    def allcp = classpath.toString()
    def rcp = classpath.join(":")
    execLine.addAll(['--no-fallback', '-cp', rcp])
    execLine.add(main)
    setCommandLine(execLine)
}

buildTest.dependsOn(classes, test)

def runTest = tasks.create(name: "runTest", type: Exec) {
    def testName = "testBin"
    def path = Paths.get(project.buildDir.absolutePath, testName).toAbsolutePath().toString()
    setCommandLine([path])
}
runTest.dependsOn(buildTest)
